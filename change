Counting change

How many different ways can we make change of $ 1.00,
given half-dollars, quarters, dimes, nickels, and pennies?
How about any given amount of money?

This problem has a simple solution as a recursive procedure.
Let's think of the types of coins available as arranged in some order.
Then the following relation holds:

The num of ways to change amount a using n kinds of coins =
the num of ways using all but the first kind of coin, plus
the number of ways to change amount a - d using all n kinds of coins,
where d is the denomination of the first kind of coin. 

To see why this is true, observe that
the ways to make change can be divided into two groups:
those that do not use any of the first kind of coin, and those that do.
Therefore, the total number of ways to make change for some amount
is equal to the number of ways to make change for the amount
without using any of the first kind of coin,
plus the number of ways assuming that we do use the first kind of coin.
But the latter number is equal to the number for
the amount that remains after using a coin of the first kind.

Recursively reduce the problem of changing a given amount
to the problem of changing smaller amounts using fewer kinds of coins.
Use this reduction rule to describe an algorithm
if we specify the degenerate cases.
(We could also apply the reduction rule to the problem of
making change for 10 cents using pennies and nickels)
 
If a is exactly 0, we should count that as 1 way to make change.
If a is less than 0, we should count that as 0 ways to make change.
If n is 0, we should count that as 0 ways to make change. 

We can easily translate this description into a recursive procedure:

(defn count-change [amount]
  (cc amount 5))

(defn cc [amount kinds-of-coins]
  (cond (= amount 0) 1
        (or (< amount 0) (= kinds-of-coins 0)) 0
        :else (+ (cc amount
                     (- kinds-of-coins 1))
                 (cc (- amount
                        (first-denomination kinds-of-coins))
                     kinds-of-coins))))

(defn first-denomination [kinds-of-coins]
  (cond (= kinds-of-coins 1) 1
        (= kinds-of-coins 2) 5
        (= kinds-of-coins 3) 10
        (= kinds-of-coins 4) 25
        (= kinds-of-coins 5) 50))

(The first-denomination procedure takes as input
the number of kinds of coins available
and returns the denomination of the first kind.
Here we are thinking of the coins
as arranged in order from largest to smallest,
but any order would do as well.)

We can now answer our original question about changing a dollar:

(count-change 100)
292

Count-change generates a tree-recursive process
with redundancies similar to those in our first implementation of fib.
(It will take quite a while for that 292 to be computed.)
We leave this problem as a challenge.
The observation that a tree-recursive process
may be highly inefficient but often easy to specify and understand
has led people to propose that one could get the best of both worlds
by designing a ``smart compiler'' that could transform
tree-recursive procedures into more efficient procedures.

One approach to coping with redundant computations is to arrange matters so that we automatically construct a table of values as they are computed. Each time we are asked to apply the procedure to some argument, we first look to see if the value is already stored in the table, in which case we avoid performing the redundant computation. This strategy, known as tabulation or memoization, can be implemented in a straightforward way. Tabulation can sometimes be used to transform processes that require an exponential number of steps (such as count-change) into processes whose space and time requirements grow linearly with the input. See exercise 3.27. 